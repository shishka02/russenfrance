<?php

/**
 * Implements hook_field_widget_info().
 */
function ref_addressfield_autocomplete_menu(){
  $items['ref_addressfield_autocomplete/cities_autocomplete/%'] = array(
    'title' => 'Autocomplete for cities',
    'page callback' => '_ref_addressfield_autocomplete_cities_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['ref_addressfield_autocomplete/departments_cities_autocomplete/%'] = array(
    'title' => 'Autocomplete for departments and cities',
    'page callback' => '_ref_addressfield_autocomplete_departments_cities_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function ref_addressfield_autocomplete_field_widget_info() {
  return array(
    'ref_addressfield_autocomplete' => array(
      'label' => t('Russenfrance Address Autocomplete'),
      'field types' => array('addressfield'),
      'settings' => array(
        'country' => array(),
        'format_handlers' => array('address'),
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ref_addressfield_autocomplete_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'ref_addressfield_autocomplete') {
    $form['country'] = array(
      '#type' => 'select',
      '#title' => t('Country'),
      '#options' => array('FR' => t('France')),
      '#default_value' => $settings['available_countries'],
      '#weight' => 1,
    );
    
  }
 
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 */
//function addressfield_autocomplete_form_field_ui_widget_type_form_alter(&$form, $form_state, $form_id) {
  //$instance = $form_state['build_info']['args'][0];
  //$field = field_info_field($instance['field_name']);
  //if (in_array($field['type'], array('addressfield', 'geofield', 'geolocation_latlng', 'location'))) {
    //$form['#submit'][] = '_addressfield_autocomplete_field_ui_widget_type_form_submit';
  //}
//}


/**
 * Implements hook_field_widget_form().
 */
function ref_addressfield_autocomplete_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'ref_addressfield_autocomplete':
      $default_city = !empty($items[$delta]['locality']) ? $items[$delta]['locality'] : '';
      $default_postal = !empty($items[$delta]['postal_code']) ? $items[$delta]['postal_code'] : '';
      //$data = isset($default_value['data']) ? unserialize($default_value['data']) : array();
      
      if($default_city && $default_postal) {
        $default_value = $default_city.' ('. $default_postal.')';
      } else {
        $default_value = $default_city. $default_postal;
      }

    
      $element['city_posatal_code'] = array(
        //'#attributes' => array('class' => array('edit-dnd-fields-ranks'), 'title' => t('')),
        '#type' => 'textfield',
        //'#size' => 3,
        //'#maxlength' => 3,
        '#title' => $element['#title'],
        '#description' => $element['#description'],
        '#autocomplete_path' => 'ref_addressfield_autocomplete/cities_autocomplete/'.$instance['widget']['settings']['country'],
        '#ref_country' => $instance['widget']['settings']['country'],
        '#default_value' => $default_value,
        //'#prefix' => '<div class="dnd-fields-skill-field dnd-fields-skill-ranks-field">',
        //'#suffix' => '</div>',
        '#element_validate' => array('_ref_addressfield_autocomplete_widget_transform'),
        '#required' => $instance['required'],
      );
    
      break;
    
  }

  return $element;
}

///**
 //* Implements hook_theme().
 //*/
//function addressfield_autocomplete_theme() {
  //return array(
    //'addressfield_autocomplete_map' => array(
      //'variables' => array(
        //'attributes' => array(
          //'class' => array('autocomplete-map', 'clearfix'),
        //),
      //),
    //),
  //);
//}

///**
 //* Render a container for a set of address fields.
 //*/
//function theme_addressfield_autocomplete_map($variables) {
  //$attributes = $variables['attributes'];
  //$attributes['class'][] = 'autocomplete-map';
  //$attributes['class'][] = 'clearfix';
  //return '<div' . drupal_attributes($attributes) . '></div>';
//}

/**
 * Implements hook_field_attach_presave().
 *
 * Attaching the latitude and longitude values for geofield is done here.
 */
//function ref_addressfield_autocomplete_field_attach_presave($entity_type, $entity) {
  //// Loop over any geofield using our geocode widget
  //$entity_info = entity_get_info($entity_type);
  //$bundle_name = empty($entity_info['entity keys']['bundle']) ? $entity_type : $entity->{$entity_info['entity keys']['bundle']};
  //foreach (field_info_instances($entity_type, $bundle_name) as $instance) {
    //if ($instance['widget']['type'] === 'ref_addressfield_autocomplete') {
      ////dsm('presave');
      ////dsm($instance);
      ////$values = _addressfield_autocomplete_widget_get_field_value($entity_type, $entity, $instance);
      ////if ($values) {
        ////$entity->{$instance['field_name']} = $values;
      ////}
    //}
  //}
//}

/**
 * Addressfield autocomplete transform.
 *
 * Transforms data into the structure accepted by addressfield.
 */
function _ref_addressfield_autocomplete_widget_transform($element, &$form_state, $form) {
  //dsm($form_state['values']);
  //dsm($element);
  
  $parents = $element['#parents'];
  $values = drupal_array_get_nested_value($form_state['values'], $parents);
  $address = array();
  
  //dsm($values);
  
  

  if (!empty($values)) {
    // city
    $city = FALSE;
    $matches = array();
    $pattern = '/^[\D]+/';
    preg_match($pattern, $values, $matches);
    if($matches[0]) {
      $city = trim(substr($matches[0], 0, strlen($matches[0]) - 1));
    }
    
    // postal code
    $postal_code = FALSE;
    $matches = array();
    $pattern = '/[\d]+/';
    preg_match($pattern, $values, $matches);
    if($matches[0]) {
      $postal_code = $matches[0];
    }
    //dsm('city: '. $city);
    //dsm('postal: '.$postal_code);
    
    if(empty($city) || empty($postal_code)) {
      form_error($element, t('City or postal code is not properly filled.'));
    }
    
    $address['country'] = $element['#ref_country'];
    $address['locality'] = $city;
    $address['postal_code'] = $postal_code;
    if($postal_code && $address['country'] == 'fr') {
      $address['sub_administrative_area'] = db_query("SELECT dep_code FROM {ref_fr_cities} WHERE postal_code = :postal_code LIMIT 1", array(':postal_code' => $postal_code))->fetchField();
      if(!empty($address['sub_administrative_area'])) {
        module_load_include('inc', 'ref_addressfield_autocomplete', 'ref_addressfield_autocomplete.regions.fr');
        $address['administrative_area'] = ref_addressfield_autocomplete_get_region_by_departament_fr($address['sub_administrative_area']);
      }
    }
    
    
    //$data['latitude'] = $values['widget']['latitude'];
    //$data['longitude'] = $values['widget']['longitude'];
    //$data['zoom'] = $values['widget']['zoom'];
    //$data['formatted_address'] = $values['autocomplete'];
    //foreach (array('latitude', 'longitude', 'zoom') as $key) {
      //unset($values['widget'][$key]);
    //}
    //$address = $data;
    //$address['data'] = serialize($data);
  }
  else {
    $address = array();
  }
  
  //form_set_error('sds','sdsd');
  //return;

  array_pop($parents);
  drupal_array_set_nested_value($form_state['values'], $parents, $address);
  /*
   * From addressfield 7.x-1.0-rc1 we also need to set the input to the value
   * of the widget. Otherwise the form does not appear.
   */
  drupal_array_set_nested_value($form_state['input'], $parents, $address);
}

/** Maybe TODO
 * Submit function for after widget is saved.
 *
 * Tried to use hook_field_update_instance to fix bugs when update the instance
 * widget. This did not work so it was changed to an extra submission function.
 */
//function _addressfield_autocomplete_field_ui_widget_type_form_submit($form, &$form_state) {
  //$bundle = $form['#bundle'];
  //$entity_type = $form['#entity_type'];
  //$field_name = $form['#field_name'];

  //// Retrieve the stored instance settings to merge with the incoming values.
  //$instance = field_read_instance($entity_type, $field_name, $bundle);
  //$widget = $instance['widget'];
  //if (!isset($instance['default_value'][0]) && in_array($widget['type'], array('addressfield_autocomplete', 'addressfield_standard'))) {
    //$instance['default_value'][0] = array();
    //field_update_instance($instance);
  //}
//}

/**
 * Menu callback for autocomplete cities and postal codes
 */
function _ref_addressfield_autocomplete_cities_autocomplete($country, $string){
  $matches = array();
  
  if($country == 'fr') {
    if(is_numeric($string)) {
      $result = db_select('ref_fr_cities', 'c')
        ->fields('c', array('name', 'postal_code'))
        ->condition('postal_code', db_like($string) . '%', 'LIKE')
        ->range(0,5)
        ->execute();

      // save the query to matches
      foreach ($result as $row) {
        $city_postal = $row->name.' ('. $row->postal_code .')';
        $city_postal_out = $row->name.' (<strong>'. $string.'</strong>'. substr($row->postal_code, strlen($string)) .')';
        $matches[$city_postal] = $city_postal_out;
      }
      
    } else {
      $result = db_select('ref_fr_cities', 'c')
        ->fields('c', array('name', 'postal_code'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->range(0,5)
        ->execute();

      // save the query to matches
      foreach ($result as $row) {
        $city_postal = $row->name.' ('. $row->postal_code .')';
        $city_postal_out = '<strong>'.$string.'</strong>'. substr($row->name, strlen($string)).' ('.$row->postal_code.')';
        $matches[$city_postal] = $city_postal_out;
      }

    }
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
 * Menu callback for autocomplete departments, cities and postal codes
 */
function _ref_addressfield_autocomplete_departments_cities_autocomplete($country, $string){
  $matches = array();
  $string = trim($string);
  
  if($country == 'fr' && strlen($string) > 0) {
    if(is_numeric($string[0])) {
      $sql = "(SELECT d.name, d.code AS postal_code FROM {ref_fr_departments} d WHERE d.code LIKE :string LIMIT 1)
              UNION
              (SELECT c.name, c.postal_code FROM {ref_fr_cities} c WHERE c.postal_code LIKE :string)
              LIMIT 5";
      $args = array(':string' => $string.'%');
      $result = db_query($sql, $args);

      // save the query to matches
      foreach ($result as $row) {
        $city_postal = $row->name.' ('. $row->postal_code .')';
        $city_postal_out = $row->name.' (<strong>'. $string.'</strong>'. substr($row->postal_code, strlen($string)) .')';
        $matches[$city_postal] = $city_postal_out;
      }
      
    } else {
      $sql = "(SELECT d.name, d.code AS postal_code FROM {ref_fr_departments} d WHERE d.name LIKE :string LIMIT 1)
              UNION
              (SELECT c.name, c.postal_code FROM {ref_fr_cities} c WHERE c.name LIKE :string)
              LIMIT 5";
      $args = array(':string' => $string.'%');
      $result = db_query($sql, $args);

      // save the query to matches
      foreach ($result as $row) {
        $city_postal = $row->name.' ('. $row->postal_code .')';
        $city_postal_out = '<strong>'.$string.'</strong>'. mb_substr($row->name, strlen($string)).' ('.$row->postal_code.')';
        $matches[$city_postal] = $city_postal_out;
      }

    }
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
 * Implements hook_field_formatter_info()
 */
function ref_addressfield_autocomplete_field_formatter_info() {
  return array(
    'ref_addressfield_autocomplete' => array(
      'label' => t('Russenfrance Address Autocomplete format'),
      'field types' => array('addressfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info()
 */
function ref_addressfield_autocomplete_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'ref_addressfield_autocomplete':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['postal_code'].' '.$item['locality']);
      }
      break;
  }
  return $element;
}
